---

- include_vars: extra_configs.yml

- set_fact:
    mgmt_service_roles_base:
      - ACTIVITYMONITOR
      - ALERTPUBLISHER
      - EVENTSERVER
      - HOSTMONITOR
      - REPORTSMANAGER
      - SERVICEMONITOR
    mgmt_service_roles_nav:
      - NAVIGATOR
      - NAVIGATORMETASERVER
    
- set_fact:
    mgmt_service_roles: "{{ mgmt_service_roles_base }}"
  when: deployment.cloudera_manager.version.split('.')[0] == '7'

- set_fact:
    mgmt_service_roles: "{{ mgmt_service_roles_base + mgmt_service_roles_nav }}"
  when: deployment.cloudera_manager.version.split('.')[0] < '7'

- name: Install the Cloudera Manager Server Packages
  yum:
    name:
    - cloudera-manager-daemons
    - cloudera-manager-server
    - cloudera-manager-agent
    - openldap-clients
    state: installed

- set_fact:
    scm_host: "{{ groups['scm_server'][0] }}"

- name: Prepare Cloudera Manager Server External Database
  command: |
    {{ cloudera_manager_database.prepare_script_path }}  -f
    --host {{ cloudera_manager_database.host }}
    {{ cloudera_manager_database.type }}
    {{ cloudera_manager_database.name }}
    {{ cloudera_manager_database.user }}
    {{ cloudera_manager_database.password }}
  changed_when: False

- name: Create CSD directory
  file:
    path: /opt/cloudera/csd
    state: directory
    owner: cloudera-scm
    group: cloudera-scm
    mode: 0755

- name: Download CSDs
  get_url:
    url: "{{ item }}"
    dest: /opt/cloudera/csd
    mode: 0644
  with_items: "{{ deployment.cloudera_manager.csds }}"
  when: deployment.cloudera_manager.csds is defined

- name: Start the Cloudera Manager Server
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  notify:
    - wait cloudera-scm-server
  with_items:
    - cloudera-scm-server
    - cloudera-scm-agent

# Trigger handler to wait for SCM to startup
- meta: flush_handlers

- name: Get Cloudera Manager API version
  uri:
    url: http://{{ scm_host }}:{{ scm_port }}/api/version
    method: GET
    status_code: 200
    user: "{{ scm_default_user }}"
    password: "{{ scm_default_pass }}"
    force_basic_auth: yes
    return_content: yes
  register: result

# Set base CM API URL
- set_fact:
    cm_api_url: "http://{{ scm_host }}:{{ scm_port }}/api/{{ result.content }}"

- name: Get the host identifiers and names from Cloudera Manager
  uri:
    url: "{{ cm_api_url }}/hosts"
    method: GET
    status_code: 200
    user: "{{ scm_default_user }}"
    password: "{{ scm_default_pass }}"
    force_basic_auth: yes
    return_content: yes
  register: scm_host_list

- name: Extract the host identifiers and names into facts
  set_fact:
    scm_hosts: "{{ lookup('template', 'scm_host_list.j2') | from_yaml }}"

- name: Print the extracted host identifiers and names
  debug:
    var: scm_hosts
    verbosity: 2

- name: Check license file exists
  stat:
    path: "{{ deployment.cloudera_manager.license.file }}"
    follow: yes
  register: license_file
  when: deployment.cloudera_manager.license.type == 'enterprise'

- debug:
    msg: "License file exists = {{ license_file.stat.exists }}"
    verbosity: 1
  when: deployment.cloudera_manager.license.type == 'enterprise'

# https://cloudera.github.io/cm_api/apidocs/v12/path__cm_license.html
- name: Upload license file to Cloudera Manager
  shell: >
    curl
    -u {{ scm_default_user }}:{{ scm_default_pass }}
    -X POST -H 'Content-Type:multipart/form-data'
    -F license=@{{ deployment.cloudera_manager.license.file }}
    {{ cm_api_url }}/cm/license
  args:
    warn: False
  register: resp
  failed_when: "'owner' not in resp.stdout"
#  notify:
#    - restart cloudera-scm-server
  when: deployment.cloudera_manager.license.type == 'enterprise' and license_file.stat.exists

# https://cloudera.github.io/cm_api/apidocs/v12/path__cm_trial_begin.html
- name: Begin Cloudera Manager trial license
  uri:
    url: "{{ cm_api_url }}/cm/trial/begin"
    method: POST
    status_code: 200
    force_basic_auth: yes
    user: "{{ scm_default_user }}"
    password: "{{ scm_default_pass }}"
  ignore_errors: True
#  notify:
#    - restart cloudera-scm-server
  when: deployment.cloudera_manager.license.type == 'trial' or not license_file.stat.exists

- meta: flush_handlers

- set_fact:
    scm_configs: "{{ deployment.cloudera_manager.configs | default({}) | combine(database_extra.configs, kerberos_extra.configs, parcels_extra.configs, recursive=True) }}"

# https://cloudera.github.io/cm_api/apidocs/v13/path__cm_config.html
- name: Update Cloudera Manager settings
  uri:
    url: "{{ cm_api_url }}/cm/config"
    method: PUT
    body_format: json
    body: "{{ lookup('template', 'scm.j2', convert_data=False) }}"
    status_code: 200
    force_basic_auth: yes
    user: "{{ scm_default_user }}"
    password: "{{ scm_default_pass }}"
    return_content: yes

# https://cloudera.github.io/cm_api/apidocs/v13/path__cm_commands_importAdminCredentials.html
- name: Import KDC admin credentials
  uri:
    url: "{{ cm_api_url }}/cm/commands/importAdminCredentials?username={{ krb5_kdc_admin_user }}&password={{ krb5_kdc_admin_passwd }}"
    method: POST
    status_code: 200
    force_basic_auth: yes
    user: "{{ scm_default_user }}"
    password: "{{ scm_default_pass }}"
    return_content: yes
  register: response
  when: deployment.krb5 is defined

- name: Wait for KDC admin credentials import to complete
  uri: 
    url: "{{ cm_api_url }}/commands/{{ response.json.id }}"
    body_format: json
    force_basic_auth: yes
    user: "{{ scm_default_user }}"
    password: "{{ scm_default_pass }}"
    return_content: yes
  register: result
  until: not result.json.active
  retries: 30
  delay: 10
  when: deployment.krb5 is defined
  failed_when: result.json.success is defined and not result.json.success

# Wait for agents to send heartbeats in case SCM has just been restarted
# Adding CMS will fail if host details haven't been reported in
- name: Wait for agent heartbeats
  pause:
    seconds: 30

# https://cloudera.github.io/cm_api/apidocs/v12/path__cm_service.html#PUT
- name: Setup Cloudera Management Service (CMS)
  uri:
    url: "{{ cm_api_url }}/cm/service"
    method: PUT
    body_format: json
    body: "{{ lookup('template', 'cms_base.j2', convert_data=False) }}"
    status_code: 200
    force_basic_auth: yes
    user: "{{ scm_default_user }}"
    password: "{{ scm_default_pass }}"
    return_content: yes
  register: cms_resp
  failed_when:
    - "'MGMT' not in cms_resp.content"
    - "'CMS instance already exists' not in cms_resp.content"

# https://cloudera.github.io/cm_api/apidocs/v12/path__cm_service_commands_start.html
- name: Start Cloudera Management Service
  uri:
    url: "{{ cm_api_url }}/cm/service/commands/start"
    method: POST
    status_code: 200
    force_basic_auth: yes
    user: "{{ scm_default_user }}"
    password: "{{ scm_default_pass }}"
    return_content: yes
  register: start_resp
  failed_when: "'startTime' not in start_resp.content"
